<?php

namespace App\Controller\Api;

use App\Controller\ApiController;
use Cake\ORM\TableRegistry;
use Cake\Http\ServerRequest;

class EventsController extends ApiController {

    public function index() {
        
        $requestData = $this->request;
        $query = $requestData->query;
        $length = 0;
        $start = 1;
        $pagination = array_key_exists("pagination", $query) ? $query["pagination"] : null;
        
        if(!empty($pagination)) {
            $length = empty($pagination) ? 0 : $pagination["perpage"];
            $start = empty($pagination) ? 1 : $pagination["page"];
        }
        
        $arrEvent = $this->getEvents($requestData,$length,$start);
        
        if($length == 0){
            $length = count($arrEvent["data"]);
        }
        
        $arrMeta['page'] = $start;
        $arrMeta['pages'] = ceil($arrEvent["count"] / $length);
        $arrMeta['perpage'] = $length;
        $arrMeta['total'] = $arrEvent["count"];
        
        $meta = $arrMeta;
        $data = $arrEvent["data"];

        $this->set(compact('meta', 'data'));
        $this->set('_serialize', ['meta', 'data']);
    }

    public function addArtist(){
        $requestData = $this->request->data();
        $eventId = $requestData["eventId"];
        $artistId = $requestData["artistId"];

        $tblEventArtists = TableRegistry::get("EventArtists");

        $existingRecord = $tblEventArtists->find()->where(["artist_id" => $artistId, "event_id" => $eventId])->first();

        if(empty($existingRecord)){
            $eventArtistEntity = $tblEventArtists->newEntity();
            $eventArtistEntity->set("artist_id", $artistId);
            $eventArtistEntity->set("event_id", $eventId);
            $tblEventArtists->save($eventArtistEntity);

            if(empty($eventArtistEntity->errors())){
                $this->set([
                    "status" => true,
                    "id" => $eventArtistEntity->id, 
                    "message" => "Record has been creaated Successfully",
                    '_serialize' => ['status', 'id', 'message']
                ]);
            } else {
                 $this->set([
                    "status" => false,
                    "id" => 0, 
                    "message" => "There was an error during database transaction",
                    '_serialize' => ['status', 'id', 'message']
                ]);
            }
        } else {
            $this->set([
                "status" => false,
                "id" => 0, 
                "message" => "This artist already exists in the event",
                '_serialize' => ['status', 'id', 'message']
            ]);
        }
    }
	
	public function getOne(){	
		$tblEvents = TableRegistry::get("Events");
		$query = $tblEvents->find()
						->contain([
                            "EventDemographics"=>["Demographics"],
                            "Budgets",
                            "ArtistNumbers",
                            "EventGenres" => ["Genres"],
                            "Teams",
                            "EventArtists" => ["Artists"]
                        ])
						->where(["Events.id" => $this->request->params["id"], "Events.is_deleted" => 0]);
		
		$eventEntity = $query->first();

        $this->set([
            'event' => $eventEntity ? $eventEntity->toArray() : null,
            '_serialize' => ['event']
        ]);
	}

    public function getEvents($requestData = null, $length=0, $start=1) {

        $tblEvents = TableRegistry::get("Events");
        $arrWhere = ['Events.is_deleted' => 0];
        if (!empty($requestData['name'])) {
            $arrWhere = ['Events.name' => $requestData['name']];
        }

		$total = 0;
		
        // Prepare the paged query
        $arrEventCount = $tblEvents->find('all')->where($arrWhere);

        $query = $tblEvents->find('all')
                ->contain(["EventDemographics","Budgets","Teams"=>["TeamMembers"=>["Users"]]])
				->order(["Events.id" => "DESC"])
                ->where($arrWhere);
        
        if (!empty($length)) {
            $total = $query->count();
            $query->limit($length);
            $query->page($start);
        }

        $arrEvent = $query->hydrate(false)
                ->toArray();
        if(empty($length)){
            $total = count($arrEvent);
        }

        return ["count" => $total, "data" => $arrEvent];
    }

    public function delete() {
        $requestData = $this->request->params;
        $tblEvents = TableRegistry::get("Events");
        $eventEntity = $tblEvents->get($requestData['id']);
        $eventEntity->set('is_deleted', 1);
        $result = $tblEvents->save($eventEntity);
        
        
        if (!empty($result)) {
            $return = true;
	    $id = $result;
            $message = 'Successfully deleted the data.';
        } else {
            $return = false;
            $id = 0;
            $message = 'There is a problem of deleting request data.';
        }
        $this->set([
            'response' => ["status" => $return, "id" => $id, "message" => $message],
            '_serialize' => ['response']
        ]);
        
    }

    public function create() {
        $requestData = $this->request->getData();
        $result = $this->save($requestData);
        $message = [];
                       
        if (!empty($result)) {
            $return = true;
	    $id = $result;
            $message = 'Successfully save request data.';
        } else {
            $return = false;
            $id = 0;
            $message = 'There is a problem of saving request data.';
        }
        $this->set([
            "status" => $return,
			"id" => $id, 
			"message" => $message,
            '_serialize' => ['status', 'id', 'message']
        ]);
        
        
    }

    public function saveEventSurveys() {
        $requestData = $this->request->getData();
        $tblEventSurvey = TableRegistry::get("eventSurveys");
        $id = $requestData['id'];
        if(empty($id)) {
           $eventSurveyEntity = $tblEventSurvey->newEntity();
           $eventSurveyEntity->set('survey_date', date('Y-m-d'));
        }else{
            $eventSurveyEntity = $tblEventSurvey->get($id);
        }
        $eventSurveyEntity->set('ip', $requestData['ip']);
        $eventSurveyEntity->set('event_id', $requestData['event_id']);
        $eventSurveyEntity->set('artist_id', $requestData['artist_id']);
        $eventSurveyEntity->set('take_survey', $requestDate['take_survey']);
        $eventSurveyEntity->set('artist_rate', $requestData['artist_rate']);
        $eventSurveyEntity->set('survey_create', $requestData['survey_create']);
        $eventSurveyEntity->set('email', $requestData['email']);
        $eventSurveyEntity->set('question_option1_id', $requestData['question_option1_id']);
        $eventSurveyEntity->set('question_option2_id', $requestData['question_option2_id']);

        $tblEventSurvey->save($eventSurveyEntity);

        if (!empty($eventSurveyEntity->id)) {
            $return = true;
            $id = $eventSurveyEntity->id;
            $message = 'Successfully save request data.';
        } else {
            $return = false;
            $id = 0;
            $message = 'There is a problem of saving request data.';
        }
        $this->set([
            "status" => $return, 
            "id" => $id, 
            "message" => $message,
            '_serialize' => ['status', 'id', 'message']
        ]);
    }

    public function save($eventData) {
        $tblEvents = TableRegistry::get("Events");
        $id = $eventData['id'];
        if (empty($id)) {
            $eventEntity = $tblEvents->newEntity();
            $eventEntity->set('created_at', date('Y-m-d'));
        } else {
            $eventEntity = $tblEvents->get($id);
            $eventEntity->set('updated_at', date('Y-m-d'));
        }
		
		$start_date = explode("T", $eventData['start_date']);
		$end_date = explode("T", $eventData['end_date']);
		
        $eventEntity->set('team_id', $id);
		$eventEntity->set('status', 1);
		$eventEntity->set('is_deleted', 0);
		$eventEntity->set('name', $eventData['name']);
        $eventEntity->set('start_date', $start_date[0]);
        $eventEntity->set('end_date', $end_date[0]);
        $eventEntity->set('profile_picture', $eventData['profile_picture']);
        $eventEntity->set('description', $eventData['description']);
        $eventEntity->set('venue_name', $eventData['venue_name']);
        $eventEntity->set('address_line_1', $eventData['address_line_1']);
        $eventEntity->set('address_line_2', $eventData['address_line_2']);
        $eventEntity->set('public_survey_status', $eventData['public_survey_status']);
        $eventEntity->set('public_survey_title', $eventData['public_survey_title']);
        $eventEntity->set('city', $eventData['city']);
        $eventEntity->set('state', $eventData['state']);
        $eventEntity->set('zip', $eventData['zip']);
        $eventEntity->set('budget_id', $eventData['budget_id']);
        $eventEntity->set('number_of_artist', $eventData['number_of_artist']);
        $eventEntity->set('mode', $eventData['mode']);
        $eventEntity->set('url', $eventData['url']);
        $eventEntity->set('welcome_message', $eventData['welcome_message']);
        $eventEntity->set('legal_disclaimer', $eventData['legal_disclaimer']);
        $eventEntity->set('event_description', $eventData['event_description']);
        $eventEntity->set('opt_in', $eventData['opt_in']);
        $eventEntity->set('opt_in_message', $eventData['opt_in_message']);
        $eventEntity->set('thanks_message', $eventData['thanks_message']);
        $eventEntity->set('review_enable', $eventData['review_enable']);
        
        $tblEvents->save($eventEntity);

        if (empty($eventEntity->errors())) {
            return $eventEntity->id;
        } else {
            return false;
        }
        
    }

    public function update() {
        $requestData = $this->request->getData();

        $result = $this->save($requestData);
        $message = [];

        if (!empty($result)) {
            $return = true;
			$id = $result;
            $message = 'Successfully save request data.';
        } else {
            $return = false;
	    $id = 0;
            $message = 'There is a problem of saving request data.';
        }
        $this->set([
            "status" => $return, 
			"id" => $id, 
			"message" => $message,
            '_serialize' => ['status', 'id', 'message']
        ]);
    }
    
    public function budget() {
        
        error_reporting(0);
        $requestData = $this->request;
        $tblBudget = TableRegistry::get("Budgets");
        $arrWhere = ['Budgets.is_deleted' => 0];
        
        // Prepare the paged query
        $arrBudget = $tblBudget->find('all')
                
               ->where($arrWhere)
                ->hydrate(false)
                ->toArray();
      
        $data = $arrBudget;        
        
        $this->set(compact('data'));
        $this->set('_serialize', ['data']);
        
    }
    
    public function artistNumber() {
        
        error_reporting(0);
        $requestData = $this->request;
        $tblArtistNumbers = TableRegistry::get("ArtistNumbers");
        $arrWhere = ['ArtistNumbers.is_deleted' => 0];
        
        // Prepare the paged query
        $arrArtistNumbers = $tblArtistNumbers->find('all')
                
               ->where($arrWhere)
                ->hydrate(false)
                ->toArray();
      
        $data = $arrArtistNumbers;        
        
        $this->set(compact('data'));
        $this->set('_serialize', ['data']);
        
    }

    public function updateEventArtistPick() {

        $requestData = $this->request->getData();
        $tblEventArtists = TableRegistry::get("EventArtists");
                        
        $result = $tblEventArtists->updateAll(['is_picked' => $requestData['status']], ['event_id' => $requestData['eventId'],'artist_id' => $requestData['artistId']]);
            
        if (!empty($result)) {
            $return = true;
            $message = 'Successfully save request data.';
        } else {
            $return = false;
            $message = 'There is a problem of saving request data.';
        }
        $this->set([
            "status" => $return, 
            "message" => $message,
            '_serialize' => ['status', 'message']
        ]);

    }

    public function getEventServeyResults() {
        $requestData = $this->request->params;
        $eventId = $requestData["eventId"];
		
		// Get Event details with associated event team and event artist //
		$tblEvents = TableRegistry::get("Events");
		$query = $tblEvents->find()->contain([
			"Teams" => [
				"fields" => ["id"]
			] , 
			"EventArtists" => [
				"Artists" => [
					"fields" => ["name", "id"], "Budgets",
					"ArtistChannels" => function($q){
						$q->contain(["Channels" => ["fields" => ["id", "channel_view_count", "channel_subscriber_count"]]]);
						$q->where(["ArtistChannels.is_primary" => 1]);
						return $q;
					}
				]
			]
		])->select(["Events.id"])->where(["Events.id" => $eventId]);
		$rsEventDetails = $query->hydrate(false)->first();
		unset($qurey);

        // Get TeamId from  rsEventdetails
		$teamId = $rsEventDetails["team"]["id"];

		
        //Get the Public Servey votes for the requested event and get the sum of the positive vote//
        $tblPublicSurveyVotes = TableRegistry::get("PublicSurveyVotes");        
        $query = $tblPublicSurveyVotes->find()
					->contain(['PublicSurveys']);
					
		$query->select(['PublicSurveyVotes.artist_id', 'count' => $query->func()->sum('PublicSurveyVotes.vote')])
				->group(['PublicSurveyVotes.artist_id'])                 
				->where(['PublicSurveys.event_id' => $eventId]);
				
					
		$rsPublicSurveyAtistVotes =	$query->hydrate(false)
									->toArray();
									
		unset($query);

		
        // Get the total number of vote for that event //
		$tblPublicSurveys = TableRegistry::get("PublicSurveys");
		$query = 	$tblPublicSurveys->find()
					->where(['PublicSurveys.event_id' => $eventId]);
		$publicSurveyCount = $query->count();
		
		unset($query);

		
		$tblTeamSurveys = TableRegistry::get("TeamSurveys");
		$query = $tblTeamSurveys->find();
					
		$query->select(['TeamSurveys.artist_id', 'count' => $query->func()->sum('TeamSurveys.vote'), 'total' => $query->func()->count('TeamSurveys.vote')])
				->group(['TeamSurveys.artist_id'])                 
				->where(['TeamSurveys.event_id' => $eventId]);
		
		$rsTeamSurveyAtistVotes =	$query->hydrate(false)->toArray();
		unset($query);
		
		
		$tblTeamMembers = TableRegistry::get("TeamMembers");
		$query = $tblTeamMembers->find()
				->contain(["Users", "TeamSurveys" => function($q) use($eventId) {
					$q->select(["artist_id", "vote", "team_member_id"]);
					$q->where(['TeamSurveys.event_id' => $eventId]);
					return $q;
				}])
				->select(["TeamMembers.id", "TeamMembers.user_id", "Users.first_name", "Users.last_name", "Users.profile_pic"])
				->where(["TeamMembers.team_id" => $teamId]);
				
		$rsTeamMemberSurveyVotes = $query->hydrate(false)->toArray();
		unset($qurey);		
		
		$matrix = [];
		$membersVoteCount = 0;
		
		for($i=0; $i<count($rsEventDetails["event_artists"]); $i++){
			$row = [
				"channel_subscriber_count" => $rsEventDetails["event_artists"][$i]["artist"]["artist_channels"][0]["channel"]["channel_subscriber_count"],
				"channel_view_count" => $rsEventDetails["event_artists"][$i]["artist"]["artist_channels"][0]["channel"]["channel_view_count"],
                "budget" => $rsEventDetails["event_artists"][$i]["artist"]["budget"]["amount"],
                "artistId" => $rsEventDetails["event_artists"][$i]["artist"]["id"],
				"public" => 0, 
				"team" => 0, 
				"team_progress" => 0, 
				"members" => array_fill(0, count($rsTeamMemberSurveyVotes), null)
			];
			$teamProgress = 0;
			
			for($j=0; $j<count($rsPublicSurveyAtistVotes); $j++){
				if($rsPublicSurveyAtistVotes[$j]["artist_id"] == $rsEventDetails["event_artists"][$i]["artist_id"]){
					$row["public"] = $publicSurveyCount == 0 ? 0 : (($rsPublicSurveyAtistVotes[$j]["count"] / $publicSurveyCount ) * 100);
					break;
				}
			}
			
			$teamSurveyArtistVotesCounter = 0;
			for($teamSurveyArtistVotesCounter=0; $teamSurveyArtistVotesCounter<count($rsTeamSurveyAtistVotes); $teamSurveyArtistVotesCounter++){
				if($rsTeamSurveyAtistVotes[$teamSurveyArtistVotesCounter]["artist_id"] == $rsEventDetails["event_artists"][$i]["artist_id"]){
					$row["team"] = count($rsTeamSurveyAtistVotes) == 0 ? 0 : ((100 / $rsTeamSurveyAtistVotes[$teamSurveyArtistVotesCounter]["total"]) * $rsTeamSurveyAtistVotes[$teamSurveyArtistVotesCounter]["count"]);
					break;
				}
			}
			
			
			for($j=0; $j<count($rsTeamMemberSurveyVotes); $j++){
				for($k=0; $k<count($rsTeamMemberSurveyVotes[$j]["team_surveys"]); $k++){
					if($rsTeamMemberSurveyVotes[$j]["team_surveys"][$k]["artist_id"] == $rsEventDetails["event_artists"][$i]["artist_id"]){
						$row["members"][$j] = $rsTeamMemberSurveyVotes[$j]["team_surveys"][$k]["vote"];
						$membersVoteCount++;
						break;
					}
				}
			}
			
			$teamProgress = ((100 / count($rsTeamMemberSurveyVotes)) * $rsTeamSurveyAtistVotes[$teamSurveyArtistVotesCounter]["total"]);
			$row["team_progress"] = $teamProgress;
			
			$matrix[$rsEventDetails["event_artists"][$i]["artist"]["name"]] = $row;
		}
		
		$members = [];
		for($i=0; $i<count($rsTeamMemberSurveyVotes); $i++){
			array_push($members, $rsTeamMemberSurveyVotes[$i]["user"]);
		}
		
		
		
		$teamProgress = number_format(($membersVoteCount / (count($members) * count($rsEventDetails["event_artists"])) * 100), 0);
		
		$this->set('response', ["members" => $members, "data" => $matrix, "team_progress" => $teamProgress]);
        $this->set('_serialize', ['response']);
    }

}
