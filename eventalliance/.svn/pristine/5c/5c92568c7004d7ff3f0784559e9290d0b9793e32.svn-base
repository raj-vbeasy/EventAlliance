<?php

namespace App\Controller\Api;

use App\Controller\ApiController;
use Cake\ORM\TableRegistry;
use App\Vendor\Team;
use App\Vendor\TeamMember;

class TeamsController extends ApiController {

    public function initialize() {
        parent::initialize();
    }

    public function index() {
        error_reporting(0);
        $requestData = $this->request; 
        $pagination = $requestData->query["pagination"];
        $length = empty($pagination) ? 10 : $pagination["perpage"];
        $start = empty($pagination) ? 1 : $pagination["page"];
        
        $arrTeam = $this->getTeams($requestData,$length,$start);
        
        $arrMeta['page'] = $start;
        $arrMeta['pages'] = ceil($arrTeam["total"] / $length);
        $arrMeta['perpage'] = $length;
        $arrMeta['total'] = $arrTeam["total"];
        
        $meta = $arrMeta;
        $data = $arrTeam["data"];        
        
        $this->set(compact('meta', 'data'));
        $this->set('_serialize', ['meta', 'data']);
    }
    
    public function getTeams($requestData,$length,$start) {
        
        
        $tblTeams = TableRegistry::get("Teams");
        $arrWhere = ['Teams.is_deleted' => 0];
        if (!empty($requestData['name'])) {
            $arrWhere = ['Teams.name' => $requestData['name']];
        }
        if (!empty($requestData['role_name'])) {
            $arrWhere = ['TeamRoles.role_name' => $requestData['role_name']];
        }
        // Prepare the paged query
        $arrTeamCount = $tblTeams->find('all')->where($arrWhere);
        
        $query = $tblTeams->find('all')
                ->contain(['Events','TeamMembers' => ['TeamRoles','Users']])
                ->where($arrWhere);
        
        $total = $query->count();
        
        $arrTeam = $query->limit($length)
                ->page($start)
                ->hydrate(false)
                ->toArray();
        
        return ["total" => $total, "data" => $arrTeam];
    }

    public function delete() {
        $return = 'ERROR';
        $message = 'There is a problem of deleting request data.';
        $deleteId = $this->request->param('id');
        $tblTeams = TableRegistry::get("Teams");
        $teamEntity = $tblTeams->get($deleteId);
        $teamEntity->set('is_deleted', 1);
        $tblTeams->save($teamEntity);
        if ($teamEntity->errors()) {
            $return = 'SUCCESS';
            $message = 'Sucessfully delete the data.';
        }
        $this->set([
            'response' => ["status" => $return, "message" => $message],
            '_serialize' => ['response']
        ]);
    }

    public function create() {
        $requestData = $this->request->getData();
        $objTeam = new Team();
        $objTeam->saveTeam($requestData);
        
        $result = $this->save($requestData);
        $message = [];
        if (!empty($result)) {
            $return = 'SUCCESS';
            $message['id'] = $result;
            $message['message'] = 'Successfully save request data.';
        } else {
            $return = 'ERROR';
            $message['message'] = 'There is a problem of saving request data.';
        }

        $this->set([
            'response' => ["status" => $return, "message" => $message],
            '_serialize' => ['response']
        ]);
    }

    
    public function update() {
        echo "hello";
        exit;
        $requestData = $this->request->getData();
        $result = $this->save($requestData);
        $message = [];

        if (!empty($result)) {
            $return = 'SUCCESS';
            $message['id'] = $result;
            $message['message'] = 'Successfully save request data.';
        } else {
            $return = 'ERROR';
            $message['message'] = 'There is a problem of saving request data.';
        }
        $this->set([
            'response' => ["status" => $return, "message" => $message],
            '_serialize' => ['response']
        ]);
    }
    
    
    public function save($userData) {
        $tblTeams = TableRegistry::get("Teams");
        $tblTeamMembers = TableRegistry::get("TeamMembers");
        $id = $this->request->params['id'];
        if (empty($id)) {
            $teamEntity = $tblTeams->newEntity();
        } else {
            $teamEntity = $tblTeams->get($id);
        }
        $teamEntity->set('photo', $userData['photo']);
        $teamEntity->set('name', $userData['name']);
        $tblUsers->save($teamEntity);
        
        $teamId = $teamEntity->id;
        if(!empty($teamId)) {
            $teamMemberEntity = $tblTeamMembers->newEntity();
            
            $teamMemberEntity->set('user_id', $userData['user_id']);
            $teamMemberEntity->set('team_id', $teamId);
            $teamMemberEntity->set('team_role_id', $userData['team_role_id']);
            $tblTeamMembers->save($teamMemberEntity);
            
        }

        if (empty($teamEntity->errors())) {
            return $teamEntity->id;
        } else {
            return false;
        }
    }

    
    
    public function roles() {
        
        error_reporting(0);
        $requestData = $this->request;
        $tblTeamRoles = TableRegistry::get("TeamRoles");
        $arrWhere = ['TeamRoles.is_deleted' => 0];
        
        // Prepare the paged query
        $arrTeamRoles = $tblTeamRoles->find('all')
                
               ->where($arrWhere)
                ->hydrate(false)
                ->toArray();
      
        $data = $arrTeamRoles;        
        
        $this->set(compact('data'));
        $this->set('_serialize', ['data']);
        
    }

}
