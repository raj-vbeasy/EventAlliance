import { Component, OnInit, ViewEncapsulation, AfterViewInit } from '@angular/core';
import { DomSanitizer, SafeResourceUrl, SafeUrl } from '@angular/platform-browser';
import { Helpers } from '../../../../helpers';
import { Router, ActivatedRoute, Params } from '@angular/router';
import { ArtistDetails } from './artistdetails.service';
import { WSResponse } from "../../../../ws-response";
//import { Genres} from './genres';
import { Observable } from 'rxjs';

import { YouTubeVideo } from "./youtubevideo";
import "rxjs/add/operator/map";
//import { Artist } from "./artist";



@Component({
    selector: "app-artist-details",
    templateUrl: "./artist-details.component.html",
    encapsulation: ViewEncapsulation.None,
    providers: [ArtistDetails]

})

export class ArtistDetailsComponent implements OnInit, AfterViewInit {

    public data: any = { artist_genres: [], budget: { amount: 0 } };
    // public formData: YouTubeArtist;
    public artistVideos: Array<YouTubeVideo>;

    public videoUrl: any = null;

    public artistName: string;
    public artistImage: string;

    public artistId: number;

    public relatedArtists: Array<any>;

    public video: { title: string, description: string } = { title: "", description: "" };

    public currentTeamId: any;

    public chartType: string = "line";
    public chartOptions: any = { legend: false };
    public chartLabels: any = [];
    public subscribersData: any = [];
    public viewersData: any = [];
    public chartLineColors: any = [];

    
    public lineChartColors:Array<any> = [
    {
      backgroundColor: 'rgba(77,83,96,0.2)',
      borderColor: 'rgba(77,83,96,1)',
      pointBackgroundColor: 'rgba(77,83,96,1)',
      pointBorderColor: '#fff',
      pointHoverBackgroundColor: '#fff',
      pointHoverBorderColor: 'rgba(77,83,96,1)'
    }];

    constructor(private activatedRoute: ActivatedRoute, public _artistDetails: ArtistDetails, public domSanitizer: DomSanitizer) {

    }

    ngOnInit() {
        
    }

    ngAfterViewInit() {
        // Get Current User information from local storage
        this.currentTeamId = null;
        let currentUser  = JSON.parse(localStorage.getItem('currentUser'));
        if(currentUser.team_members.length == 1) {
            this.currentTeamId = currentUser.team_members[0].team_id;
        }    
 
       
        Helpers.setLoading(true);
        this.activatedRoute.params.subscribe((params: Params) => {
            this.artistId = params['id'];
            this.getArtistDetailForChartXAxisLevel(this.artistId);
            this.getArtistDetail(this.artistId);            
            this.getRelatedArtistsDetails(this.artistId);
            this.getYouTubeArtist(this.artistId);           
            Helpers.setLoading(false);

        });
    }

    addArtistButton(eventId: number = null) {
        //alert(teamId);
        var userId = 0;
        //Get the userid from localstorage
        this._artistDetails.addArtist(userId, this.artistId, eventId).subscribe((response: WSResponse) => {
            if (response.status === true) {
                alert("The artist has been added to the event");
            } else {
                alert("There was an error processing your request\n\nDetails: " + response.message);
            }
        }, (err) => {
            alert("There was an error communicating with the server");
        });
    }

     
    getArtistDetailForChartXAxisLevel(artistId: number) {
        this._artistDetails.getDetails(artistId).subscribe((t: any) => {
            
            this.data = t;
            var _graphLabels:Array<string> = [];
            var _blank: string ='';

            for(var i=0; i<this.data.channel_data.length; i++){
                //_graphLabels.push(this.data.channel_data[i]["process_date"]);
                _graphLabels.push(_blank);                
            }
            this.chartLabels = _graphLabels;
        }, (err) => {
            Helpers.setLoading(false);
            //TODO: Error handling 
        });
    }

    getArtistDetail(artistId: number) {
        Helpers.setLoading(true);
        
        this._artistDetails.getDetails(artistId).subscribe((t: any) => {
            
            this.data = t;

            var _graphLabels:Array<string> = [];
            var _graphSubscribers:Array<number> = [];
            var _graphViewers:Array<number> = [];
            //var _blank: string ='';

            for(var i=0; i<this.data.channel_data.length; i++){
                _graphLabels.push(this.data.channel_data[i]["process_date"]);
                //_graphLabels.push(_blank);
                _graphSubscribers.push(this.data.channel_data[i].channel_subscriber_count);
                _graphViewers.push(this.data.channel_data[i].channel_view_count);
            }

            this.chartLabels = _graphLabels;

            
          
            this.subscribersData = [{data:_graphSubscribers, label: "Subscribers"}];
            this.viewersData = [{data:_graphViewers, label: "Viewers"}];
            this.chartLineColors = [{ // dark grey
              backgroundColor: 'rgba(77,83,96,0.2)',
              borderColor: 'rgba(77,83,96,1)',
              pointBackgroundColor: 'rgba(77,83,96,1)',
              pointBorderColor: '#fff',
              pointHoverBackgroundColor: '#fff',
              pointHoverBorderColor: 'rgba(77,83,96,1)'
            }];

            this.artistName = this.data.name;
            this.artistImage = this.data.profile_picture;

            console.log('ubscribers Data');
            console.log(this.subscribersData);
            console.log('Viewer Data');
            console.log(this.viewersData);
            console.log(this.chartLabels);
            
        }, (err) => {
            Helpers.setLoading(false);
            //TODO: Error handling 
        });
    }

    getRelatedArtistsDetails(artistId: number) {
        this._artistDetails.getRelatedArtists(artistId).subscribe((t: any) => {
            this.relatedArtists = t;
            //console.log(this.relatedArtists);

        }, (err) => {
            Helpers.setLoading(false);
        });
    }

    

    getYouTubeArtist(artistId: number) {

        this._artistDetails.getYouTubeArtistByChannel(artistId).subscribe((data: Array<YouTubeVideo>) => {
            console.log(data);
            this.artistVideos = data;
            this.videoUrl = this.domSanitizer.bypassSecurityTrustResourceUrl('https://www.youtube.com/embed/' + data[0].videoId);
            this.video.title = this.artistVideos[0].videoTitle;
            this.video.description = this.artistVideos[0].videoDescription;
        }, (err) => {
            console.log(err);

        });
    }

    openVideoUrl(index: number) {
        console.log(index);
        console.log(this.artistVideos);
        this.videoUrl = this.domSanitizer.bypassSecurityTrustResourceUrl('https://www.youtube.com/embed/' + this.artistVideos[index].videoId);
        this.video.title = this.artistVideos[index].videoTitle;
        this.video.description = this.artistVideos[index].videoDescription;
        var aTag = jQuery("#youtubeVideoContainer");
        jQuery('html,body').animate({ scrollTop: aTag.offset().top - 100 }, 'fast');
    }


}