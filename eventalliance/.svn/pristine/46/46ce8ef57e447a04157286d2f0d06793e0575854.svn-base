import { Component, OnInit, ViewEncapsulation, AfterViewInit, Input, ViewChildren, Directive, HostListener } from '@angular/core';
import { FormControl, FormGroup, FormBuilder, Validators } from '@angular/forms';
import { Helpers } from '../../../../helpers';
import { ScriptLoaderService } from '../../../../_services/script-loader.service'
import { environment } from '../../../../../environments/environment'
import { WSResponse } from "../../../../ws-response";

import { ArtistService } from './artists.service'
import { ArtistDetails } from '../artist-details/artistdetails.service';
import { Artist } from './artist';
import { ArtistChannel } from "./artistchannel";
import { ArtistGenre } from "./artistgenre";
import { Channel } from "./channel";
import { ArtistDataTable } from "./artists.datatable";


import * as $ from "jquery";
declare var jQuery: any;


@Component({
    selector: "app-artists",
    templateUrl: "./artists.component.html",
    encapsulation: ViewEncapsulation.None,
    providers: [ArtistService, ArtistDataTable,ArtistDetails],
})

export class ArtistsComponent implements OnInit, AfterViewInit {
    public formData: Artist;
    public modalTitle: string;
	
    public allGenres: Array<any>;
    public allBudgets: Array<any>;

    teamForm: FormGroup;
    formUserID = [];

    public currentUser: any = {};

    public selectedEventId: number;
    public selectedEventName: string;
    public userId:number;

    public artistId: number;


    public search:{keyword: string, genreId: number, budgetId: number} = {keyword: "", genreId: 0, budgetId: 0};

    constructor(private _artistService: ArtistService, private _artistDataTable: ArtistDataTable, private _scriptLoaderService: ScriptLoaderService, private _artistDetails: ArtistDetails) {
        this.formData = new Artist();
    }


    ngOnInit() {
         var userId = 0;
        this.currentUser  = JSON.parse(localStorage.getItem('currentUser'));        
        this.userId = this.currentUser.id;
    }

    public openTeamAddModal() {
        this.formData.reset();
        this.modalTitle = "Create an Artist";
        jQuery("#editArtist").modal("show");
    }

    public TableClick($e: any) {
        var target = $e.target || $e.srcElement || $e.currentTarget;

        if (jQuery(target).hasClass("modal-activator")) {
            this._getArtistDetails(jQuery(target).data("id"));
            $e.preventDefault();
        } else {
            var parent = jQuery(target).parent();
            if (parent.hasClass("modal-activator")) {
                this._getArtistDetails(parent.data("id"));
                $e.preventDefault();
            }
        } 

        if (jQuery(target).hasClass("modal-activator-events")) {
            jQuery("#eventList").modal("show");
            var artist_id = jQuery(target).data("id");
            this.artistId = artist_id;
            this.addArtistEvent()
            $e.preventDefault();
        }
    }

    public searchArtists(){
        this._artistDataTable.search(this.search.keyword + "^" + this.search.genreId.toString() + "^" + this.search.budgetId.toString());
    }
     
    public resetArtistsData() {
       this.search.keyword = '';
       this.search.genreId = 0;
       this.search.budgetId = 0;
       this._artistDataTable.search('');
    }

	public saveArtists(){
        this.formData.genres = [];
        var _selectedGenres = jQuery("#cmbGenres").val();
        var _artistGenre: ArtistGenre;
        for(var i=0; i<_selectedGenres.length; i++){
            _artistGenre = new ArtistGenre();
            _artistGenre.id = _selectedGenres[i];
            this.formData.genres.push(_artistGenre);
        }
        this.formData.budgetId = jQuery("#cmbBudget").val();

        if(this.formData.id > 0){
    		this._artistService.updateArtist(this.formData).subscribe((response:WSResponse) => {
                if(response.status === true){
                    alert(response.message);
                    jQuery("#modal_artist").modal("hide");
                    this._artistDataTable.redraw();
                } else {
                    alert("Error\n\n" + response.message);
                }
            }, (err) => {
                console.log(err);
                alert("Error\n\nThere was an error communicating with the server");
            });
        } else {
            this._artistService.createArtist(this.formData).subscribe((response:WSResponse) => {
                if(response.status === true){
                    alert(response.message);
                    jQuery("#modal_artist").modal("hide");
                    this._artistDataTable.redraw();
                } else {
                    alert("Error\n\n" + response.message);
                }
            }, (err) => {
                console.log(err);
                alert("Error\n\nThere was an error communicating with the server");
            });
        }
	}

    private _getArtistDetails(artistId: number) {
        this.formData.reset();
        console.log('click' + artistId);
        Helpers.setLoading(true);
        this._artistService.getArtistDetails(artistId).subscribe((t: Artist) => {
            var _selectedGenres = [];
            Helpers.setLoading(false);
            this.formData = Object.assign(new Artist, t);
            for(var i=0; i<this.formData.genres.length; i++){
                _selectedGenres.push(<any>(this.formData.genres[i])["genre_id"]);
            }
            jQuery("#cmbGenres").val(_selectedGenres).trigger("change");
            jQuery("#cmbBudget").val(this.formData.budgetId).trigger("change");
            this.modalTitle = "Edit " + this.formData.name;
            jQuery("#modal_artist").modal("show");
        }, (err) => {
            Helpers.setLoading(false);
        });
    }

    public openCreateArtistModal(){
         this.modalTitle = "Add Artist";
         this.formData.reset();
         jQuery("#modal_artist").modal("show");
    }

    addArtistEvent(eventId: number = null) {        
        //Get the userid from localstorage  
        this._artistDetails.addArtist(this.userId, this.artistId, eventId).subscribe((response: WSResponse) => {
            if (response.status === true) {
                jQuery("#eventList").modal("hide");
                alert("The artist has been added to the event");
            } else {
                if(response.message=="MULTIEVENT") {
                    jQuery("#eventList").modal("show");
                } else {
                    alert("There was an error processing your request\n\nDetails: " + response.message);
                }
            }
        }, (err) => {
            alert("There was an error communicating with the server");
        });
    }

    SaveEvent(eventId: number) {    
        this._artistDetails.addArtist(this.userId, this.artistId, eventId).subscribe((response: WSResponse) => {
            if (response.status === true) {
                alert("The artist has been added to the event");
                jQuery("#eventList").modal("hide");
            } else {               
                alert("There was an error processing your request\n\nDetails: " + response.message);              
            }
        }, (err) => {
            alert("There was an error communicating with the server");
        });
    }


    ngAfterViewInit() {
        this.formData.reset();

        this._scriptLoaderService.loadScript("select2", "/assets/eventalliance/custom/components/forms/widgets/select2.js", true).then(() => {

            // Fetach all genre data from service
            this._artistService.getAllGenres().subscribe((data: Array<any>) => {
                var firstSelectElement: any = { id: "", name: "" }
                firstSelectElement.id = 0;
                firstSelectElement.name = "-- Select --";
                this.allGenres = data;
                this.allGenres.splice(0, 0, firstSelectElement);
                setTimeout(() => {
                    jQuery("#cmbGenres").select2();
                }, 200);
            }, (err) => {

            });

            // Fetch all budgets data

            this._artistService.getAllBudgets().subscribe((data: Array<any>) => {
                var firstSelectElement: any = { id: "", amount: "" }
                firstSelectElement.id = 0;
                firstSelectElement.amount = "-- Select --";
                this.allBudgets = data;
                this.allBudgets.splice(0, 0, firstSelectElement);
                setTimeout(() => {
                    jQuery("#cmbBudget").select2();
                }, 200);
            }, (err) => {

            });
        });

        this._scriptLoaderService.loadScript("select2", "/assets/eventalliance/custom/components/forms/widgets/select2.js", true).then(() => {
        
            jQuery("#eventsList").select2({
                ajax: {
                    url: environment.apiBaseUrl + 'events/list.json?user_id=' + this.userId,                    
                    processResults: function(data) {                       
                        /// TODO: need to change this according to the final API 
                        var transformedData = [];
                        for (var i = 0; i < data.data.length; i++) {
                            transformedData.push({ id: data.data[i].id, text: data.data[i].name });
                        }
                        return { results: transformedData };
                    }
                }
            }).on("select2:select", (e: any) => {
                this.selectedEventId = e.params.data.id;
                this.selectedEventName = e.params.data.text;
            });
        });

   
        


        //Initialize the bootstrap modals;
        jQuery("#modal_artist").modal({ show: false }).on("hidden.bs.modal", (e) => {
            this.formData.reset();
        });

        this._artistDataTable.load();

    }

}