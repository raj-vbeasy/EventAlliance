import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from "rxjs";
import { environment } from '../../../../../environments/environment';
import { Team } from "./team";
import { TeamMember } from "./teammember";
import { Members } from './members'; // Get users
import { TeamRole } from './teamrole';
import { WSResponse } from "../../../../ws-response";
import "rxjs/add/operator/map";

@Injectable()
export class TeamService {

    constructor(private _httpClient: HttpClient) { 

    }

    loadTeams(): Observable<Array<Team>> {
        return this._httpClient.get<any>(environment.apiBaseUrl + "teams/list.json").map((t:any) : Array<Team> => {
            var teams:Array<Team> = [];
            var _team:Team;
            var _teamMember: TeamMember;
            for(var i=0; i<t.data.length; i++){
                _team = new Team();
                _team.id = t.data[i].id;
                _team.name = t.data[i].name;
                _team.photo = t.data[i].photo;

                for(var j=0; j<t.data[i].team_members.length; j++){
                    _teamMember = new TeamMember();
                    _teamMember.id = t.data[i].team_members[j]["id"];
                    _teamMember.userId = t.data[i].team_members[j]["user"]["id"];
                    _teamMember.image = t.data[i].team_members[j]["user"]["profile_pic"];
                    _teamMember.name = t.data[i].team_members[j]["user"]["first_name"] + " " + t.data[i].team_members[j]["user"]["last_name"];;
                    _teamMember.roleId = t.data[i].team_members[j]["team_role"]["id"];
                    _teamMember.role = t.data[i].team_members[j]["team_role"]["role_name"];

                    _team.members.push(_teamMember);

                    if(t.data[i].team_members[j]["team_role"]["id"] == 1){
                        _team.owner = _teamMember;
                    } else if(t.data[i].team_members[j]["team_role"]["id"] == 3){
                        _team.representative = _teamMember;
                    }
                }
                teams.push(_team);
            }
            return teams;
        });
    }


    getTeamDetailWithMembers(teamId: number): Observable<Team>{
        return Observable.create((observer) => {
            setTimeout(()=>{
                var t = new Team();
                //console.log('Test'+teamId);
                //console.dir(t);
                t.name = "Test";
                t.id = 1;
                var member = new TeamMember();
                member.name = "Rakesh";
                member.role = "Admin";
                member.image = "http://www.sadcas.org/sites/default/files/focal_point_photo/icon-no-image.png";
                t.members.push(member);
                observer.next(t);
            }, 2000);
        });
    }


    updateTeam(Data: Team): Observable<WSResponse>{
        return this._httpClient.post<WSResponse>(environment.apiBaseUrl + "teams/update", Data);
    }


    createTeam(Data: Team): Observable<WSResponse> {
        console.log('Create Team');
        console.log(Data);
        return this._httpClient.post<WSResponse>(environment.apiBaseUrl + "teams/create", Data);
    }

    removeTeam(teamId: number): Observable<WSResponse> {
        return this._httpClient.delete<WSResponse>(environment.apiBaseUrl + "teams/remove" + teamId);
    }

    getMembers(): Observable<Array<TeamMember>> {
        //return this._httpClient.get<Array<TeamMember>>(environment.apiBaseUrl + "teams/members/");
        return this._httpClient.get<Array<TeamMember>>(environment.apiBaseUrl + "jsonteamuser.php");
    }

    addMember(teamId: number, memberId: number, roleId: number): Observable<WSResponse> {
        return this._httpClient.post<WSResponse>(environment.apiBaseUrl + "teams/" + teamId + "/members/", {memberId: memberId, roleId: roleId});
    }

    removeMember(teamId: number, memberId: number): Observable<WSResponse> {
        return this._httpClient.delete<WSResponse>(environment.apiBaseUrl + "teams/" + teamId + "/members/" + memberId);
    }

    getTeamRole(): Observable<Array<TeamRole>> {        
        return this._httpClient.get<any>(environment.apiBaseUrl + "teams/roles.json").map((response) : Array<TeamRole> => {
            var _roles:Array<TeamRole> = [];
            var _role:TeamRole;
            for(var i=0; i<response.data.length; i++){
                _role = new TeamRole();
                _role.id = response.data[i]["id"];
                _role.roleName = response.data[i]["role_name"];
                _roles.push(_role);
            }
            return _roles;
        });
    }
}