import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from "rxjs";
import { environment } from '../../../../../environments/environment';
import { Event } from "./event";
import { Budgets } from './budgets';
import { ArtistNumbers } from './artistnumbers';
//import { Members } from './members'; // Get users
import { WSResponse } from "../../../../ws-response";

@Injectable()
export class EventService {

    private _eventList: Array<Event>;

    constructor(private _httpClient: HttpClient) {
        this._eventList = [];
    }

    public setEventList(data: Array<any>): void {
        this._eventList = [];
        var _event: Event;
        for (var i = 0; i < data.length; i++) {
            _event = new Event();
            for (var key in data[i]) {
                if (_event.hasOwnProperty(key)) {
                    _event[key] = data[i][key];
                }
            }
            this._eventList.push(_event);
        }
    }

    public getEventList(): Array<Event> {
        return this._eventList;
    }

    getBudgets(): Observable<Array<Budgets>> {
        return this._httpClient.get<any>(environment.apiBaseUrl + "events/budgets.json").map((response): Array<Budgets> => {
            var _amounts: Array<Budgets> = [];
            var _amount: Budgets;
            for (var i = 0; i < response.data.length; i++) {
                _amount = new Budgets();
                _amount.id = response.data[i]["id"];
                _amount.amount = response.data[i]["amount"];
                _amounts.push(_amount);
            }
            return _amounts;
        });
    }

    getArtistNumbers(): Observable<Array<ArtistNumbers>> {
        return this._httpClient.get<any>(environment.apiBaseUrl + "events/artistNumber.json").map((response): Array<ArtistNumbers> => {
            var _artistnumbers: Array<ArtistNumbers> = [];
            var _artistnumber: ArtistNumbers;
            for (var i = 0; i < response.data.length; i++) {
                _artistnumber = new ArtistNumbers();
                _artistnumber.id = response.data[i]["id"];
                _artistnumber.number_of_artist = response.data[i]["number_of_artist"];
                _artistnumbers.push(_artistnumber);
            }
            return _artistnumbers;
        });
    }

    updateEvent(Data: Event): Observable<WSResponse> {
        return this._httpClient.put<WSResponse>(environment.apiBaseUrl + "events/update.json", Data);
    }

    createEvent(Data: Event): Observable<WSResponse> {
        console.log('Create Event');
        console.log(Data);
        return this._httpClient.post<WSResponse>(environment.apiBaseUrl + "createEvent", Data);
    }

    /* loadTeams(): Observable<Array<Team>> {
         return this._httpClient.get<Array<Team>>(environment.apiBaseUrl + "/teams");
     }*/


    /* getTeamDetailWithMembers(teamId: number): Observable<Team>{
         return Observable.create((observer) => {
             setTimeout(()=>{
                 var t = new Team();
                 //console.log('Test'+teamId);
                 //console.dir(t);
                 t.name = "Test";
                 t.id = 1;
                // var member = new TeamMember();
                // member.name = "Rakesh";
                 //member.role = "Admin";
                 //member.image = "http://www.sadcas.org/sites/default/files/focal_point_photo/icon-no-image.png";
                 //t.members.push(member);
                 observer.next(t);
             }, 2000);
         });
     }*/


    /* updateTeam(Data: Team): Observable<WSResponse>{
         return this._httpClient.post<WSResponse>(environment.apiBaseUrl + "memberdetails.php", Data);
     }
 
 
     createTeam(Data: Team): Observable<WSResponse> {
         console.log('Create Team');
         console.log(Data);
         return this._httpClient.post<WSResponse>(environment.apiBaseUrl + "teams", Data);
     }
 
     removeTeam(teamId: number): Observable<WSResponse> {
         return this._httpClient.delete<WSResponse>(environment.apiBaseUrl + "teams/" + teamId);
     }*/

    /* getMembers(): Observable<Array<TeamMember>> {
         //return this._httpClient.get<Array<TeamMember>>(environment.apiBaseUrl + "teams/members/");
         return this._httpClient.get<Array<TeamMember>>(environment.apiBaseUrl + "jsonteamuser.php");
     }
 
     addMember(member: TeamMember): Observable<WSResponse> {
         return this._httpClient.post<WSResponse>(environment.apiBaseUrl + "teams/members/", member);
     }
 
     removeMember(memberId: number): Observable<WSResponse> {
         return this._httpClient.delete<WSResponse>(environment.apiBaseUrl + "teams/members/" + memberId);
     }*/
}