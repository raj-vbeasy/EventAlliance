{"remainingRequest":"D:\\PROJECTS\\eventalliance\\ui\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\PROJECTS\\eventalliance\\ui\\node_modules\\ngx-uploader\\dist\\ngx-uploader.es5.js","dependencies":[{"path":"D:\\PROJECTS\\eventalliance\\ui\\node_modules\\ngx-uploader\\dist\\ngx-uploader.es5.js","mtime":1522238198969},{"path":"D:\\PROJECTS\\eventalliance\\ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1522233516422},{"path":"D:\\PROJECTS\\eventalliance\\ui\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Directive, ElementRef, EventEmitter, HostListener, Input, NgModule, Output } from '@angular/core';\nimport { Observable as Observable$1 } from 'rxjs/Observable';\nimport { Subject as Subject$1 } from 'rxjs/Subject';\nimport 'rxjs/add/operator/mergeMap';\nvar UploadStatus = /*@__PURE__*/ (function () {\n    var UploadStatus = {};\n    UploadStatus.Queue = 0;\n    UploadStatus.Uploading = 1;\n    UploadStatus.Done = 2;\n    UploadStatus.Cancelled = 3;\n    UploadStatus[UploadStatus.Queue] = \"Queue\";\n    UploadStatus[UploadStatus.Uploading] = \"Uploading\";\n    UploadStatus[UploadStatus.Done] = \"Done\";\n    UploadStatus[UploadStatus.Cancelled] = \"Cancelled\";\n    return UploadStatus;\n}());\n/**\n * @param {?} bytes\n * @return {?}\n */\nfunction humanizeBytes(bytes) {\n    if (bytes === 0) {\n        return '0 Byte';\n    }\n    var /** @type {?} */ k = 1024;\n    var /** @type {?} */ sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];\n    var /** @type {?} */ i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\nvar NgUploaderService = /*@__PURE__*/ (function () {\n    /**\n     * @param {?=} concurrency\n     * @param {?=} contentTypes\n     */\n    function NgUploaderService(concurrency, contentTypes) {\n        if (concurrency === void 0) {\n            concurrency = Number.POSITIVE_INFINITY;\n        }\n        if (contentTypes === void 0) {\n            contentTypes = ['*'];\n        }\n        var _this = this;\n        this.queue = [];\n        this.serviceEvents = new EventEmitter();\n        this.uploadScheduler = new Subject$1();\n        this.subs = [];\n        this.contentTypes = contentTypes;\n        this.uploadScheduler\n            .mergeMap(function (upload) { return _this.startUpload(upload); }, concurrency)\n            .subscribe(function (uploadOutput) { return _this.serviceEvents.emit(uploadOutput); });\n    }\n    /**\n     * @param {?} incomingFiles\n     * @return {?}\n     */\n    NgUploaderService.prototype.handleFiles = function (incomingFiles) {\n        var _this = this;\n        var /** @type {?} */ allowedIncomingFiles = [].reduce.call(incomingFiles, function (acc, checkFile, i) {\n            if (_this.isContentTypeAllowed(checkFile.type)) {\n                acc = acc.concat(checkFile);\n            }\n            else {\n                var /** @type {?} */ rejectedFile = _this.makeUploadFile(checkFile, i);\n                _this.serviceEvents.emit({ type: 'rejected', file: rejectedFile });\n            }\n            return acc;\n        }, []);\n        (_a = this.queue).push.apply(_a, [].map.call(allowedIncomingFiles, function (file, i) {\n            var /** @type {?} */ uploadFile = _this.makeUploadFile(file, i);\n            _this.serviceEvents.emit({ type: 'addedToQueue', file: uploadFile });\n            return uploadFile;\n        }));\n        this.serviceEvents.emit({ type: 'allAddedToQueue' });\n        var _a;\n    };\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    NgUploaderService.prototype.initInputEvents = function (input) {\n        var _this = this;\n        return input.subscribe(function (event) {\n            switch (event.type) {\n                case 'uploadFile':\n                    var /** @type {?} */ uploadFileIndex = _this.queue.findIndex(function (file) { return file === event.file; });\n                    if (uploadFileIndex !== -1 && event.file) {\n                        _this.uploadScheduler.next({ file: _this.queue[uploadFileIndex], event: event });\n                    }\n                    break;\n                case 'uploadAll':\n                    var /** @type {?} */ files = _this.queue.filter(function (file) { return file.progress.status === UploadStatus.Queue; });\n                    files.forEach(function (file) { return _this.uploadScheduler.next({ file: file, event: event }); });\n                    break;\n                case 'cancel':\n                    var /** @type {?} */ id_1 = event.id || null;\n                    if (!id_1) {\n                        return;\n                    }\n                    var /** @type {?} */ index = _this.subs.findIndex(function (sub) { return sub.id === id_1; });\n                    if (index !== -1 && _this.subs[index].sub) {\n                        _this.subs[index].sub.unsubscribe();\n                        var /** @type {?} */ fileIndex = _this.queue.findIndex(function (file) { return file.id === id_1; });\n                        if (fileIndex !== -1) {\n                            _this.queue[fileIndex].progress.status = UploadStatus.Cancelled;\n                            _this.serviceEvents.emit({ type: 'cancelled', file: _this.queue[fileIndex] });\n                        }\n                    }\n                    break;\n                case 'cancelAll':\n                    _this.subs.forEach(function (sub) {\n                        if (sub.sub) {\n                            sub.sub.unsubscribe();\n                        }\n                        var /** @type {?} */ file = _this.queue.find(function (uploadFile) { return uploadFile.id === sub.id; });\n                        if (file) {\n                            file.progress.status = UploadStatus.Cancelled;\n                            _this.serviceEvents.emit({ type: 'cancelled', file: file });\n                        }\n                    });\n                    break;\n                case 'remove':\n                    if (!event.id) {\n                        return;\n                    }\n                    var /** @type {?} */ i = _this.queue.findIndex(function (file) { return file.id === event.id; });\n                    if (i !== -1) {\n                        var /** @type {?} */ file = _this.queue[i];\n                        _this.queue.splice(i, 1);\n                        _this.serviceEvents.emit({ type: 'removed', file: file });\n                    }\n                    break;\n                case 'removeAll':\n                    if (_this.queue.length) {\n                        _this.queue = [];\n                        _this.serviceEvents.emit({ type: 'removedAll' });\n                    }\n                    break;\n            }\n        });\n    };\n    /**\n     * @param {?} upload\n     * @return {?}\n     */\n    NgUploaderService.prototype.startUpload = function (upload) {\n        var _this = this;\n        return new Observable$1(function (observer) {\n            var /** @type {?} */ sub = _this.uploadFile(upload.file, upload.event)\n                .subscribe(function (output) {\n                observer.next(output);\n            }, function (err) {\n                observer.error(err);\n                observer.complete();\n            }, function () {\n                observer.complete();\n            });\n            _this.subs.push({ id: upload.file.id, sub: sub });\n        });\n    };\n    /**\n     * @param {?} file\n     * @param {?} event\n     * @return {?}\n     */\n    NgUploaderService.prototype.uploadFile = function (file, event) {\n        var _this = this;\n        return new Observable$1(function (observer) {\n            var /** @type {?} */ url = event.url || '';\n            var /** @type {?} */ method = event.method || 'POST';\n            var /** @type {?} */ data = event.data || {};\n            var /** @type {?} */ headers = event.headers || {};\n            var /** @type {?} */ xhr = new XMLHttpRequest();\n            var /** @type {?} */ time = new Date().getTime();\n            var /** @type {?} */ progressStartTime = (file.progress.data && file.progress.data.startTime) || time;\n            var /** @type {?} */ speed = 0;\n            var /** @type {?} */ eta = null;\n            xhr.upload.addEventListener('progress', function (e) {\n                if (e.lengthComputable) {\n                    var /** @type {?} */ percentage = Math.round((e.loaded * 100) / e.total);\n                    var /** @type {?} */ diff = new Date().getTime() - time;\n                    speed = Math.round(e.loaded / diff * 1000);\n                    progressStartTime = (file.progress.data && file.progress.data.startTime) || new Date().getTime();\n                    eta = Math.ceil((e.total - e.loaded) / speed);\n                    file.progress = {\n                        status: UploadStatus.Uploading,\n                        data: {\n                            percentage: percentage,\n                            speed: speed,\n                            speedHuman: humanizeBytes(speed) + \"/s\",\n                            startTime: progressStartTime,\n                            endTime: null,\n                            eta: eta,\n                            etaHuman: _this.secondsToHuman(eta)\n                        }\n                    };\n                    observer.next({ type: 'uploading', file: file });\n                }\n            }, false);\n            xhr.upload.addEventListener('error', function (e) {\n                observer.error(e);\n                observer.complete();\n            });\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState === XMLHttpRequest.DONE) {\n                    var /** @type {?} */ speedAverage = Math.round(file.size / (new Date().getTime() - progressStartTime) * 1000);\n                    file.progress = {\n                        status: UploadStatus.Done,\n                        data: {\n                            percentage: 100,\n                            speed: speedAverage,\n                            speedHuman: humanizeBytes(speedAverage) + \"/s\",\n                            startTime: progressStartTime,\n                            endTime: new Date().getTime(),\n                            eta: eta,\n                            etaHuman: _this.secondsToHuman(eta || 0)\n                        }\n                    };\n                    file.responseStatus = xhr.status;\n                    try {\n                        file.response = JSON.parse(xhr.response);\n                    }\n                    catch (e) {\n                        file.response = xhr.response;\n                    }\n                    file.responseHeaders = _this.parseResponseHeaders(xhr.getAllResponseHeaders());\n                    observer.next({ type: 'done', file: file });\n                    observer.complete();\n                }\n            };\n            xhr.open(method, url, true);\n            xhr.withCredentials = event.withCredentials ? true : false;\n            try {\n                var /** @type {?} */ uploadFile_1 = (file.nativeFile);\n                var /** @type {?} */ uploadIndex = _this.queue.findIndex(function (outFile) { return outFile.nativeFile === uploadFile_1; });\n                if (_this.queue[uploadIndex].progress.status === UploadStatus.Cancelled) {\n                    observer.complete();\n                }\n                Object.keys(data).forEach(function (key) { return file.form.append(key, data[key]); });\n                Object.keys(headers).forEach(function (key) { return xhr.setRequestHeader(key, headers[key]); });\n                file.form.append(event.fieldName || 'file', uploadFile_1, uploadFile_1.name);\n                _this.serviceEvents.emit({ type: 'start', file: file });\n                xhr.send(file.form);\n            }\n            catch (e) {\n                observer.complete();\n            }\n            return function () {\n                xhr.abort();\n            };\n        });\n    };\n    /**\n     * @param {?} sec\n     * @return {?}\n     */\n    NgUploaderService.prototype.secondsToHuman = function (sec) {\n        return new Date(sec * 1000).toISOString().substr(11, 8);\n    };\n    /**\n     * @return {?}\n     */\n    NgUploaderService.prototype.generateId = function () {\n        return Math.random().toString(36).substring(7);\n    };\n    /**\n     * @param {?} contentTypes\n     * @return {?}\n     */\n    NgUploaderService.prototype.setContentTypes = function (contentTypes) {\n        if (typeof contentTypes != 'undefined' && contentTypes instanceof Array) {\n            if (contentTypes.find(function (type) { return type === '*'; }) !== undefined) {\n                this.contentTypes = ['*'];\n            }\n            else {\n                this.contentTypes = contentTypes;\n            }\n            return;\n        }\n        this.contentTypes = ['*'];\n    };\n    /**\n     * @return {?}\n     */\n    NgUploaderService.prototype.allContentTypesAllowed = function () {\n        return this.contentTypes.find(function (type) { return type === '*'; }) !== undefined;\n    };\n    /**\n     * @param {?} mimetype\n     * @return {?}\n     */\n    NgUploaderService.prototype.isContentTypeAllowed = function (mimetype) {\n        if (this.allContentTypesAllowed()) {\n            return true;\n        }\n        return this.contentTypes.find(function (type) { return type === mimetype; }) !== undefined;\n    };\n    /**\n     * @param {?} file\n     * @param {?} index\n     * @return {?}\n     */\n    NgUploaderService.prototype.makeUploadFile = function (file, index) {\n        return {\n            fileIndex: index,\n            id: this.generateId(),\n            name: file.name,\n            size: file.size,\n            type: file.type,\n            form: new FormData(),\n            progress: {\n                status: UploadStatus.Queue,\n                data: {\n                    percentage: 0,\n                    speed: 0,\n                    speedHuman: humanizeBytes(0) + \"/s\",\n                    startTime: null,\n                    endTime: null,\n                    eta: null,\n                    etaHuman: null\n                }\n            },\n            lastModifiedDate: file.lastModifiedDate,\n            sub: undefined,\n            nativeFile: file\n        };\n    };\n    /**\n     * @param {?} httpHeaders\n     * @return {?}\n     */\n    NgUploaderService.prototype.parseResponseHeaders = function (httpHeaders) {\n        if (!httpHeaders) {\n            return;\n        }\n        return httpHeaders.split('\\n')\n            .map(function (x) { return x.split(/: */, 2); })\n            .filter(function (x) { return x[0]; })\n            .reduce(function (ac, x) {\n            ac[x[0]] = x[1];\n            return ac;\n        }, {});\n    };\n    return NgUploaderService;\n}());\nvar NgFileSelectDirective = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} elementRef\n     */\n    function NgFileSelectDirective(elementRef) {\n        var _this = this;\n        this.elementRef = elementRef;\n        this.fileListener = function () {\n            if (_this.el.files) {\n                _this.upload.handleFiles(_this.el.files);\n            }\n        };\n        this.uploadOutput = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    NgFileSelectDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        this._sub = [];\n        var /** @type {?} */ concurrency = this.options && this.options.concurrency || Number.POSITIVE_INFINITY;\n        var /** @type {?} */ allowedContentTypes = this.options && this.options.allowedContentTypes || ['*'];\n        this.upload = new NgUploaderService(concurrency, allowedContentTypes);\n        this.el = this.elementRef.nativeElement;\n        this.el.addEventListener('change', this.fileListener, false);\n        this._sub.push(this.upload.serviceEvents.subscribe(function (event) {\n            _this.uploadOutput.emit(event);\n        }));\n        if (this.uploadInput instanceof EventEmitter) {\n            this._sub.push(this.upload.initInputEvents(this.uploadInput));\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgFileSelectDirective.prototype.ngOnDestroy = function () {\n        this.el.removeEventListener('change', this.fileListener, false);\n        this._sub.forEach(function (sub) { return sub.unsubscribe(); });\n    };\n    return NgFileSelectDirective;\n}());\nvar NgFileDropDirective = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} elementRef\n     */\n    function NgFileDropDirective(elementRef) {\n        this.elementRef = elementRef;\n        this.stopEvent = function (e) {\n            e.stopPropagation();\n            e.preventDefault();\n        };\n        this.uploadOutput = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    NgFileDropDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        this._sub = [];\n        var /** @type {?} */ concurrency = this.options && this.options.concurrency || Number.POSITIVE_INFINITY;\n        var /** @type {?} */ allowedContentTypes = this.options && this.options.allowedContentTypes || ['*'];\n        this.upload = new NgUploaderService(concurrency, allowedContentTypes);\n        this.el = this.elementRef.nativeElement;\n        this._sub.push(this.upload.serviceEvents.subscribe(function (event) {\n            _this.uploadOutput.emit(event);\n        }));\n        if (this.uploadInput instanceof EventEmitter) {\n            this._sub.push(this.upload.initInputEvents(this.uploadInput));\n        }\n        this.el.addEventListener('drop', this.stopEvent, false);\n        this.el.addEventListener('dragenter', this.stopEvent, false);\n        this.el.addEventListener('dragover', this.stopEvent, false);\n    };\n    /**\n     * @return {?}\n     */\n    NgFileDropDirective.prototype.ngOnDestroy = function () {\n        this._sub.forEach(function (sub) { return sub.unsubscribe(); });\n    };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NgFileDropDirective.prototype.onDrop = function (e) {\n        e.stopPropagation();\n        e.preventDefault();\n        var /** @type {?} */ event = { type: 'drop' };\n        this.uploadOutput.emit(event);\n        this.upload.handleFiles(e.dataTransfer.files);\n    };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NgFileDropDirective.prototype.onDragOver = function (e) {\n        if (!e) {\n            return;\n        }\n        var /** @type {?} */ event = { type: 'dragOver' };\n        this.uploadOutput.emit(event);\n    };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NgFileDropDirective.prototype.onDragLeave = function (e) {\n        if (!e) {\n            return;\n        }\n        var /** @type {?} */ event = { type: 'dragOut' };\n        this.uploadOutput.emit(event);\n    };\n    return NgFileDropDirective;\n}());\nvar NgUploaderModule = /*@__PURE__*/ (function () {\n    function NgUploaderModule() {\n    }\n    return NgUploaderModule;\n}());\n/**\n * Generated bundle index. Do not edit.\n */\nexport { NgUploaderModule, humanizeBytes, NgUploaderService, UploadStatus, NgFileSelectDirective, NgFileDropDirective };\n//# sourceMappingURL=ngx-uploader.es5.js.map\n",null]}